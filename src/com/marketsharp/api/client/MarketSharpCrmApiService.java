package client;
import org.restlet.ext.odata.Query;

/**
 * Copyright 2005-2010 Noelios Technologies.
 * 
 * The contents of this file are subject to the terms of one of the following
 * open source licenses: LGPL 3.0 or LGPL 2.1 or CDDL 1.0 or EPL 1.0 (the
 * "Licenses"). You can select the license that you prefer but you may not use
 * this file except in compliance with one of these Licenses.
 * 
 * You can obtain a copy of the LGPL 3.0 license at
 * http://www.opensource.org/licenses/lgpl-3.0.html
 * 
 * You can obtain a copy of the LGPL 2.1 license at
 * http://www.opensource.org/licenses/lgpl-2.1.php
 * 
 * You can obtain a copy of the CDDL 1.0 license at
 * http://www.opensource.org/licenses/cddl1.php
 * 
 * You can obtain a copy of the EPL 1.0 license at
 * http://www.opensource.org/licenses/eclipse-1.0.php
 * 
 * See the Licenses for the specific language governing permissions and
 * limitations under the Licenses.
 * 
 * Alternatively, you can obtain a royalty free commercial license with less
 * limitations, transferable or non-transferable, directly at
 * http://www.noelios.com/products/restlet-engine
 * 
 * Restlet is a registered trademark of Noelios Technologies.
 */

/**
* Generated by the generator tool for the OData extension for the Restlet framework.<br>
*
* @see <a href="https://api4.marketsharpm.com/WcfDataService.svc/$metadata">Metadata of the target OData service</a>
*
*/
public class MarketSharpCrmApiService extends org.restlet.ext.odata.Service {

    /**
     * Constructor.
     * 
     */
    public MarketSharpCrmApiService() {
        super("https://api4.marketsharpm.com/WcfDataService.svc/");
    }

    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Contact entity) throws Exception {
        addEntity("/Contacts", entity);
    }

    /**
     * Creates a query for contact entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Contact> createContactQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Contact.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ContactType entity) throws Exception {
        addEntity("/ContactTypes", entity);
    }

    /**
     * Creates a query for contactType entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ContactType> createContactTypeQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ContactType.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ContactPhone entity) throws Exception {
        addEntity("/ContactPhones", entity);
    }

    /**
     * Creates a query for contactPhone entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ContactPhone> createContactPhoneQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ContactPhone.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Contract entity) throws Exception {
        addEntity("/Contracts", entity);
    }

    /**
     * Creates a query for contract entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Contract> createContractQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Contract.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Job entity) throws Exception {
        addEntity("/Jobs", entity);
    }

    /**
     * Creates a query for job entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Job> createJobQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Job.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProduct entity) throws Exception {
        addEntity("/JobProducts", entity);
    }

    /**
     * Creates a query for jobProduct entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProduct> createJobProductQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProduct.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProductDetail entity) throws Exception {
        addEntity("/JobProductDetails", entity);
    }

    /**
     * Creates a query for jobProductDetail entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProductDetail> createJobProductDetailQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProductDetail.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Inquiry entity) throws Exception {
        addEntity("/Inquiries", entity);
    }

    /**
     * Creates a query for inquiry entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Inquiry> createInquiryQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Inquiry.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Appointment entity) throws Exception {
        addEntity("/Appointments", entity);
    }

    /**
     * Creates a query for appointment entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Appointment> createAppointmentQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Appointment.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Address entity) throws Exception {
        addEntity("/Addresses", entity);
    }

    /**
     * Creates a query for address entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Address> createAddressQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Address.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.AppointmentResult entity) throws Exception {
        addEntity("/AppointmentResults", entity);
    }

    /**
     * Creates a query for appointmentResult entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.AppointmentResult> createAppointmentResultQuery(String subpath) {
        return createQuery(subpath, msharpmodel.AppointmentResult.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaint entity) throws Exception {
        addEntity("/LeadPaints", entity);
    }

    /**
     * Creates a query for leadPaint entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaint> createLeadPaintQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaint.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintAttachment entity) throws Exception {
        addEntity("/LeadPaintAttachments", entity);
    }

    /**
     * Creates a query for leadPaintAttachment entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintAttachment> createLeadPaintAttachmentQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintAttachment.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintFirm entity) throws Exception {
        addEntity("/LeadPaintFirms", entity);
    }

    /**
     * Creates a query for leadPaintFirm entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintFirm> createLeadPaintFirmQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintFirm.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintToFirm entity) throws Exception {
        addEntity("/LeadPaintToFirms", entity);
    }

    /**
     * Creates a query for leadPaintToFirm entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintToFirm> createLeadPaintToFirmQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintToFirm.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintToRenovator entity) throws Exception {
        addEntity("/LeadPaintToRenovators", entity);
    }

    /**
     * Creates a query for leadPaintToRenovator entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintToRenovator> createLeadPaintToRenovatorQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintToRenovator.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintToWorker entity) throws Exception {
        addEntity("/LeadPaintToWorkers", entity);
    }

    /**
     * Creates a query for leadPaintToWorker entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintToWorker> createLeadPaintToWorkerQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintToWorker.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintRenovator entity) throws Exception {
        addEntity("/LeadPaintRenovators", entity);
    }

    /**
     * Creates a query for leadPaintRenovator entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintRenovator> createLeadPaintRenovatorQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintRenovator.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.LeadPaintWorker entity) throws Exception {
        addEntity("/LeadPaintWorkers", entity);
    }

    /**
     * Creates a query for leadPaintWorker entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.LeadPaintWorker> createLeadPaintWorkerQuery(String subpath) {
        return createQuery(subpath, msharpmodel.LeadPaintWorker.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ProductDetail entity) throws Exception {
        addEntity("/ProductDetails", entity);
    }

    /**
     * Creates a query for productDetail entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ProductDetail> createProductDetailQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ProductDetail.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ProductType entity) throws Exception {
        addEntity("/ProductTypes", entity);
    }

    /**
     * Creates a query for productType entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ProductType> createProductTypeQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ProductType.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.InquirySourcePrimary entity) throws Exception {
        addEntity("/InquirySourcePrimaries", entity);
    }

    /**
     * Creates a query for inquirySourcePrimary entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.InquirySourcePrimary> createInquirySourcePrimaryQuery(String subpath) {
        return createQuery(subpath, msharpmodel.InquirySourcePrimary.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.InquirySourceSecondary entity) throws Exception {
        addEntity("/InquirySourceSecondaries", entity);
    }

    /**
     * Creates a query for inquirySourceSecondary entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.InquirySourceSecondary> createInquirySourceSecondaryQuery(String subpath) {
        return createQuery(subpath, msharpmodel.InquirySourceSecondary.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.AdditionalContact entity) throws Exception {
        addEntity("/AdditionalContacts", entity);
    }

    /**
     * Creates a query for additionalContact entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.AdditionalContact> createAdditionalContactQuery(String subpath) {
        return createQuery(subpath, msharpmodel.AdditionalContact.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Employee entity) throws Exception {
        addEntity("/Employees", entity);
    }

    /**
     * Creates a query for employee entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Employee> createEmployeeQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Employee.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Company entity) throws Exception {
        addEntity("/Companies", entity);
    }

    /**
     * Creates a query for company entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Company> createCompanyQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Company.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ProductInterest entity) throws Exception {
        addEntity("/ProductInterests", entity);
    }

    /**
     * Creates a query for productInterest entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ProductInterest> createProductInterestQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ProductInterest.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.CustomField entity) throws Exception {
        addEntity("/CustomFields", entity);
    }

    /**
     * Creates a query for customField entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.CustomField> createCustomFieldQuery(String subpath) {
        return createQuery(subpath, msharpmodel.CustomField.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ActivityResult entity) throws Exception {
        addEntity("/ActivityResults", entity);
    }

    /**
     * Creates a query for activityResult entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ActivityResult> createActivityResultQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ActivityResult.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Activity entity) throws Exception {
        addEntity("/Activities", entity);
    }

    /**
     * Creates a query for activity entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Activity> createActivityQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Activity.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProductCommissionPayments entity) throws Exception {
        addEntity("/JobProductCommissionPayments", entity);
    }

    /**
     * Creates a query for jobProductCommissionPayments entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProductCommissionPayments> createJobProductCommissionPaymentsQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProductCommissionPayments.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProductCommission entity) throws Exception {
        addEntity("/JobProductCommissions", entity);
    }

    /**
     * Creates a query for jobProductCommission entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProductCommission> createJobProductCommissionQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProductCommission.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProductCost entity) throws Exception {
        addEntity("/JobProductCosts", entity);
    }

    /**
     * Creates a query for jobProductCost entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProductCost> createJobProductCostQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProductCost.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.JobProductCostType entity) throws Exception {
        addEntity("/JobProductCostTypes", entity);
    }

    /**
     * Creates a query for jobProductCostType entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.JobProductCostType> createJobProductCostTypeQuery(String subpath) {
        return createQuery(subpath, msharpmodel.JobProductCostType.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.PaymentHistory entity) throws Exception {
        addEntity("/PaymentHistories", entity);
    }

    /**
     * Creates a query for paymentHistory entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.PaymentHistory> createPaymentHistoryQuery(String subpath) {
        return createQuery(subpath, msharpmodel.PaymentHistory.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.C800responseLead entity) throws Exception {
        addEntity("/C800ResponseLead", entity);
    }

    /**
     * Creates a query for c800responseLead entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.C800responseLead> createC800responseLeadQuery(String subpath) {
        return createQuery(subpath, msharpmodel.C800responseLead.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ActivityReference entity) throws Exception {
        addEntity("/ActivityReferences", entity);
    }

    /**
     * Creates a query for activityReference entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ActivityReference> createActivityReferenceQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ActivityReference.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.InquiryStatus entity) throws Exception {
        addEntity("/InquiryStatuses", entity);
    }

    /**
     * Creates a query for inquiryStatus entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.InquiryStatus> createInquiryStatusQuery(String subpath) {
        return createQuery(subpath, msharpmodel.InquiryStatus.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.FutureInterest entity) throws Exception {
        addEntity("/FutureInterests", entity);
    }

    /**
     * Creates a query for futureInterest entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.FutureInterest> createFutureInterestQuery(String subpath) {
        return createQuery(subpath, msharpmodel.FutureInterest.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Loan entity) throws Exception {
        addEntity("/Loans", entity);
    }

    /**
     * Creates a query for loan entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Loan> createLoanQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Loan.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Note entity) throws Exception {
        addEntity("/Notes", entity);
    }

    /**
     * Creates a query for note entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Note> createNoteQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Note.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ProcessStep entity) throws Exception {
        addEntity("/ProcessSteps", entity);
    }

    /**
     * Creates a query for processStep entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ProcessStep> createProcessStepQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ProcessStep.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Proposal entity) throws Exception {
        addEntity("/Proposals", entity);
    }

    /**
     * Creates a query for proposal entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Proposal> createProposalQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Proposal.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.ServiceOrder entity) throws Exception {
        addEntity("/ServiceOrders", entity);
    }

    /**
     * Creates a query for serviceOrder entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.ServiceOrder> createServiceOrderQuery(String subpath) {
        return createQuery(subpath, msharpmodel.ServiceOrder.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.Survey entity) throws Exception {
        addEntity("/Surveys", entity);
    }

    /**
     * Creates a query for survey entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.Survey> createSurveyQuery(String subpath) {
        return createQuery(subpath, msharpmodel.Survey.class);
    }


    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.EmployeeInfo entity) throws Exception {
        addEntity("/EmployeeInfoes", entity);
    }

    /**
     * Creates a query for employeeInfo entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.EmployeeInfo> createEmployeeInfoQuery(String subpath) {
        return createQuery(subpath, msharpmodel.EmployeeInfo.class);
    }

    /**
     * Adds a new entity to the service.
     * 
     * @param entity
     *            The entity to add to the service.
     * @throws Exception 
     */
    public void addEntity(msharpmodel.WorkCrew entity) throws Exception {
        addEntity("/WorkCrews", entity);
    }

    /**
     * Creates a query for workCrew entities hosted by this service.
     * 
     * @param subpath
     *            The path to this entity relatively to the service URI.
     * @return A query object.
     */
    public Query<msharpmodel.WorkCrew> createWorkCrewQuery(String subpath) {
        return createQuery(subpath, msharpmodel.WorkCrew.class);
    }


}